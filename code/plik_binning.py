"""
bin functions and matrix for using plik-lite

    The following files from plik_lite are used

        * blweight.dat has w_l (weights) starting from l=30
        * blmin.dat has lmin for each bin (but starting l=30), but what is
            listed is lmin-30
        * blmax.dat has lmax for the corresponding bin; again lmax-30 is
            listed on the file

    The Cl data and covariance matrices are in the following files
        * cl_cmb_plik_v18.dat
        * c_matrix_plik_v18.dat
"""
import numpy as np

location = "plik_lite_data/"
blmin = np.loadtxt(location + "blmin.dat", skiprows = 0)
blmax = np.loadtxt(location + "blmax.dat", skiprows = 0)
bwght = np.loadtxt(location + "bweight.dat", skiprows = 0) # this file starts at lb=[30,34]
cldata = np.loadtxt(location + "cl_cmb_plik_v18.dat")

TTbins = 215
EEbins = 199
TEbins = 199
rows = TTbins + EEbins + TEbins
cols = 6413 # total multipoles for TT (30-2508), EE/TE (30-1996)

def binning_matrix():
    """
    obtain the binning matrix (lb=215+199*2, ls=6413)

    once the binning matrix B is correctly generated, the binned result for
    Cls and cov can be obtained using the unbinned Cls and cov as:
        Cls_b = B Cls_ub
        cov_b = B cov_ub B^T
    """
    # the B matrix 613 x 6413 large
    mat = np.matrix(np.zeros((rows, cols)))
    # there may be a better more efficient solution usign np.vstack, but we
    # will just loop over rows
    for row in range(0, TTbins):
        roww = get_lb_row(row)
        mat[row] = np.append(roww, np.zeros(cols-len(roww)))

    for row in range(0, TEbins):
        roww = get_lb_row(row+TTbins)
        mat[row+TTbins] = np.append(roww, np.zeros(cols-len(roww)))

    for row in range(0, EEbins):
        roww = get_lb_row(row+TTbins+TEbins)
        mat[row+TTbins+TEbins] = np.append(roww, np.zeros(cols-len(roww)))

    return np.array(mat)

def get_lb_row(lbindex=0):
    """
    get the row of lbth row of the binning matrix
    this array ends at the last non-zero element, one needs to fill the
    rest with zeros when generating the full binning matrix

        * the lbin is: [ blmin[lbindex], blmax[lbindex] ]
        * the weights are simply bwght[blmin[lbindex]-30: blmax[lbindex]-30]
    """
    minlbase = 0

    if lbindex>=TTbins:
        if lbindex < TTbins + EEbins:
            lbindex = lbindex - TTbins
            minlbase = int(blmax[TTbins-1])+1
        else:
            lbindex = lbindex - TTbins - TEbins
            minlbase = int(blmax[TTbins-1])+int(blmax[TEbins-1])+2

    minlb = int(blmin[lbindex])
    zrs = np.zeros(minlb+minlbase)
    return np.append(zrs, bwght[minlb:int(blmax[lbindex]+1)])

def check_Bmatrix():
    """
    check the binning matrix generated through binning_matrix() by
    comparing binned data generated by that matrix against the binned
    data given in plik_lite already
    """
    from cosmology.cosmoparams import Planck2015
    import matplotlib.pyplot as plt

    p15 = Planck2015()
    ClTT, ClTTerr = p15.get_unbinned_Planck_data(lmin=30, lmax=2508, which="TT")
    ClTE, ClTEerr = p15.get_unbinned_Planck_data(lmin=30, lmax=1996, which="TE")
    ClEE, ClEEerr = p15.get_unbinned_Planck_data(lmin=30, lmax=1996, which="EE")
    mufac = (2.7255E6)**2.0
    Cls = np.append(ClTE, ClEE)
    Cls = np.append(ClTT, Cls)*mufac

    Bm = binning_matrix()

    Clbinned = Bm@Cls
    Clplik = cldata[:,1]

    plt.plot(Clbinned)
    plt.plot(Clplik)

    return Clbinned, Clplik
